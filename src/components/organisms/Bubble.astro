---
---

<section id="bubble" class="fixed z-10 w-full h-full top-0 left-0"></section>

<script>
  import * as THREE from "three";

  const container = document.getElementById("bubble");
  if (container !== null) {
    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(
      75,
      container.clientWidth / container.clientHeight,
      0.1,
      1000
    );
    const renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });

    renderer.setSize(container.clientWidth, container.clientHeight);
    container.appendChild(renderer.domElement);

    const bubbleGeometry = new THREE.SphereGeometry(1.8, 64, 64); // Increased the segment count
    const vertexShader = `
    varying vec3 vNormal;
    varying vec3 vWorldPosition;
    uniform float uTime;

    void main() {
      vNormal = normalize(normalMatrix * normal);
      vec4 worldPosition = modelMatrix * vec4(position, 1.0);
      vWorldPosition = worldPosition.xyz;

      // Add irregular swinging motion
      float swingFactor = sin(uTime * 0.7) * 0.1 + cos(uTime * 1.3) * 0.15;
      worldPosition.x += swingFactor;
      worldPosition.y += swingFactor * 0.5;

      gl_Position = projectionMatrix * viewMatrix * worldPosition;
    }
    `;

    const fragmentShader = `
    varying vec3 vNormal;
    varying vec3 vWorldPosition;
    uniform float uTime;

    void main() {
      float intensity = pow(0.8 - dot(vNormal, vec3(0.0, 0.0, 1.0)), 4.0);

      // Modify the base color to have more blue
      vec3 baseColor = vec3(0.3, 0.0, 0.8);
      vec3 brightColor = vec3(0.8, 0.8, 0.8);

      // Add some color variation based on world position
      float colorVariation = sin(vWorldPosition.x * 10.0 + uTime) * 0.05;

      vec3 color = baseColor * intensity + brightColor * pow(intensity, 2.0) + colorVariation;
      gl_FragColor = vec4(color, intensity);
    }
`;

    const bubbleMaterial = new THREE.ShaderMaterial({
      uniforms: {
        time: { value: 0 },
      },
      vertexShader: vertexShader,
      fragmentShader: fragmentShader,
      transparent: true,
      blending: THREE.AdditiveBlending,
    });

    // Add a light source to illuminate the bubbles
    const light = new THREE.PointLight(0xffffff, 1, 100);
    light.position.set(20, 20, 5);
    scene.add(light);

    const bubbles: THREE.Mesh[] = [];
    const bubbleCount = 15;
    for (let i = 0; i < bubbleCount; i++) {
      const bubble = new THREE.Mesh(bubbleGeometry, bubbleMaterial);
      bubble.position.set(
        Math.random() * 20 - 10,
        Math.random() * 20 - 10,
        Math.random() * 20 - 10
      );
      bubble.scale.setScalar(Math.random() * 0.5 + 0.5);
      bubbles.push(bubble);
      scene.add(bubble);
    }

    camera.position.z = 10;

    let scrollSpeed = 0.018;

    function animate() {
      requestAnimationFrame(animate);

      bubbles.forEach((bubble) => {
        bubble.position.y += scrollSpeed;
        if (bubble.position.y > 10) {
          bubble.position.y = -10;
        }
      });

      renderer.render(scene, camera);
    }

    animate();

    window.addEventListener("resize", () => {
      camera.aspect = container.clientWidth / container.clientHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(container.clientWidth, container.clientHeight);
    });
  }
</script>
